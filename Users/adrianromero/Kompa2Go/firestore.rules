rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
    
    // Admin Users collection (only admins can read/write)
    match /admin_users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Routes collection
    match /routes/{routeId} {
      // Anyone authenticated can read routes
      allow read: if isAuthenticated();
      
      // Only the driver can create/update/delete their own routes
      allow create: if isAuthenticated() && 
                      request.resource.data.driverId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
                               resource.data.driverId == request.auth.uid;
    }
    
    // Trips collection
    match /trips/{tripId} {
      // Users can read trips where they are either passenger or driver
      allow read: if isAuthenticated() && (
        resource.data.passengerId == request.auth.uid ||
        resource.data.driverId == request.auth.uid
      );
      
      // Passengers can create trips
      allow create: if isAuthenticated() && 
                      request.resource.data.passengerId == request.auth.uid;
      
      // Both passenger and driver can update trip status
      allow update: if isAuthenticated() && (
        resource.data.passengerId == request.auth.uid ||
        resource.data.driverId == request.auth.uid
      );
      
      // Only passenger can delete their trip request
      allow delete: if isAuthenticated() && 
                      resource.data.passengerId == request.auth.uid;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile or admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create/update their own profile
      allow create, update: if isOwner(userId);
      
      // Users cannot delete their profile
      allow delete: if false;
    }
    
    // Statistics collection (read-only for authenticated users)
    match /statistics/{statId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Kommute Wallet Balances
    match /kommute_wallet_balances/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    // Kommute Wallet Recharges
    match /kommute_wallet_recharges/{rechargeId} {
      // Users can read their own recharges, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      
      // Users can create recharges for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Only admins can update (approve/reject)
      allow update: if isAdmin();
      
      allow delete: if false;
    }
    
    // Kommute Wallet Transactions
    match /kommute_wallet_transactions/{transactionId} {
      // Users can read their own transactions, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      
      allow create: if isAdmin();
      allow update, delete: if false;
    }
    
    // Kommute Payment Distributions
    match /kommute_payment_distributions/{distributionId} {
      // Kommuters can read their own distributions, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.kommuterId ||
        isAdmin()
      );
      
      allow create: if isAdmin();
      allow update, delete: if false;
    }
    
    // User Profiles
    match /user_profiles/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update: if isOwner(userId);
      allow delete: if false;
    }
    
    // Kommuter Profiles
    match /kommuter_profiles/{kommuterId} {
      // Anyone authenticated can read kommuter profiles (for matching)
      allow read: if isAuthenticated();
      
      // Users can create their own kommuter profile
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own profile, admins can update any
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow delete: if false;
    }
    
    // Kommuters Collection (Approved Kommuters)
    match /kommuters/{kommuterId} {
      // Anyone authenticated can read kommuters (for matching)
      allow read: if isAuthenticated();
      
      // Users can create their own kommuter profile
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own profile, admins can update any
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow delete: if false;
    }
    
    // Kommuter Applications (Pending Approvals)
    match /kommuter_applications/{applicationId} {
      // Users can read their own applications, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      
      // Users can create applications for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own applications, admins can update any (approve/reject)
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow delete: if false;
    }
    
    // Alert Tracking
    match /alert_tracking/{alertId} {
      // Users can read alerts where they are involved, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.kommuterId ||
        isAdmin()
      );
      
      // Users can create alerts for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users involved can update, admins can update any
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.kommuterId == request.auth.uid ||
        isAdmin()
      );
      
      allow delete: if false;
    }
    
    // Alert Location Tracking (Real-time location updates)
    match /alert_location_tracking/{alertId} {
      // Users involved and admins can read
      allow read: if isAuthenticated();
      
      // Kommuters can create/update their location during active alerts
      allow create, update: if isAuthenticated();
      
      allow delete: if false;
    }
    
    // Security Questions
    match /security_questions/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // System Transactions (All transactions for admin panel)
    match /system_transactions/{transactionId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update, delete: if false;
    }
    
    // Services collection (for app configuration - read by all authenticated users)
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // App Configuration (read by all authenticated users)
    match /app_config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Trip Locations (Real-time location tracking during trips)
    match /trip_locations/{tripId} {
      // Passengers and kommuters can read their trip locations
      allow read: if isAuthenticated();
      
      // Kommuters can update their location during active trips
      allow create, update: if isAuthenticated();
      
      allow delete: if isAuthenticated();
    }
    
    // Kommuter Status (Availability and current status)
    match /kommuter_status/{kommuterId} {
      // Anyone authenticated can read kommuter status (for matching)
      allow read: if isAuthenticated();
      
      // Kommuters can update their own status
      allow create, update: if isAuthenticated() && 
                               request.auth.uid == kommuterId;
      
      allow delete: if false;
    }
    
    // Service Requests (Provider service management)
    match /service_requests/{requestId} {
      // Providers can read their own requests, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.providerId ||
        isAdmin()
      );
      
      // Providers can create requests for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.providerId == request.auth.uid;
      
      // Only admins can update (approve/reject)
      allow update: if isAdmin();
      
      allow delete: if false;
    }
    
    // Price Modification Requests
    match /price_modification_requests/{requestId} {
      // Providers can read their own requests, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.providerId ||
        isAdmin()
      );
      
      // Providers can create requests for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.providerId == request.auth.uid;
      
      // Only admins can update (approve/reject)
      allow update: if isAdmin();
      
      allow delete: if false;
    }
    
    // Chats Collection
    match /chats/{chatId} {
      // Users can read chats they are part of
      allow read: if isAuthenticated();
      
      // Users can create chats
      allow create: if isAuthenticated();
      
      // Participants can update chat
      allow update: if isAuthenticated();
      
      allow delete: if false;
    }
    
    // Messages Collection
    match /messages/{messageId} {
      // Users can read messages from their chats
      allow read: if isAuthenticated();
      
      // Users can send messages
      allow create: if isAuthenticated() && 
                      request.resource.data.senderId == request.auth.uid;
      
      // Users can update their own messages (mark as read)
      allow update: if isAuthenticated();
      
      allow delete: if false;
    }
    
    // Typing Indicators
    match /typing/{typingId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Ratings Collection
    match /ratings/{ratingId} {
      // Users can read ratings for themselves or ratings they gave
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.toUserId ||
        request.auth.uid == resource.data.fromUserId ||
        resource.data.status == 'published'
      );
      
      // Users can create ratings
      allow create: if isAuthenticated() && 
                      request.resource.data.fromUserId == request.auth.uid;
      
      // Users can update their own ratings or respond to ratings about them
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.fromUserId ||
        request.auth.uid == resource.data.toUserId
      );
      
      allow delete: if false;
    }
    
    // Rating Stats
    match /ratingStats/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Rating Prompts
    match /ratingPrompts/{promptId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
      allow delete: if false;
    }
    
    // Help Articles
    match /helpArticles/{articleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Support Tickets
    match /supportTickets/{ticketId} {
      // Users can read their own tickets, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      
      // Users can create tickets
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own tickets, admins can update any
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      
      allow delete: if false;
    }
    
    // FAQs
    match /faqs/{faqId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Emergency Alerts
    match /emergencyAlerts/{alertId} {
      // Users can read their own alerts, admins can read all
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      
      // Users can create alerts for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // Users can update their own alerts, admins can update any
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      
      allow delete: if false;
    }
    
    // Emergency Contacts
    match /emergencyContacts/{contactId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
    }
    
    // Safety Settings
    match /safetySettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
      allow delete: if false;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
